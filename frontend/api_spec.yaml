openapi: 3.0.3
info:
  title: Nejdej API
  version: 1.0.0
  description: Documentation of API endpoints of Nejdej
paths:
  /api/categories/:
    get:
      operationId: api_categories_list
      description: Return a list of all the existing categories.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
    post:
      operationId: api_categories_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/categories/{slug}/:
    get:
      operationId: api_categories_retrieve
      description: Return the given category.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this Category.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: api_categories_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this Category.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: api_categories_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this Category.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/categories/seed_inital/:
    get:
      operationId: api_categories_seed_inital_retrieve
      description: Seed the database with categories from Bazos.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/listing-views/:
    get:
      operationId: api_listing_views_list
      description: Return a list of all the listing views.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListingView'
          description: ''
    post:
      operationId: api_listing_views_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingViewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListingViewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingViewRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingView'
          description: ''
  /api/listing-views/{id}/:
    get:
      operationId: api_listing_views_retrieve
      description: Return the given listing view.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Listing View.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingView'
          description: ''
    patch:
      operationId: api_listing_views_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Listing View.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedListingViewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedListingViewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedListingViewRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingView'
          description: ''
    delete:
      operationId: api_listing_views_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Listing View.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/listings/:
    get:
      operationId: api_listings_list
      description: Return a list of all the existing listings.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Listing'
          description: ''
    post:
      operationId: api_listings_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListingRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
          description: ''
  /api/listings/{id}/:
    get:
      operationId: api_listings_retrieve
      description: Return the given listing.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Listing.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
          description: ''
    patch:
      operationId: api_listings_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Listing.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedListingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedListingRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedListingRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
          description: ''
    delete:
      operationId: api_listings_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Listing.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/reviews/:
    get:
      operationId: api_reviews_list
      description: Return a list of all the existing reviews.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
          description: ''
    post:
      operationId: api_reviews_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
  /api/reviews/{id}/:
    get:
      operationId: api_reviews_retrieve
      description: Return the given review.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Review.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    patch:
      operationId: api_reviews_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Review.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReviewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReviewRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    delete:
      operationId: api_reviews_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Review.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/sub-categories/:
    get:
      operationId: api_sub_categories_list
      description: Return a list of all the existing Subcategories.
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubCategory'
          description: ''
    post:
      operationId: api_sub_categories_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubCategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubCategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubCategoryRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubCategory'
          description: ''
  /api/sub-categories/{slug}/:
    get:
      operationId: api_sub_categories_retrieve
      description: Return the given Subcategory.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this Sub Category.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubCategory'
          description: ''
    patch:
      operationId: api_sub_categories_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this Sub Category.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSubCategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSubCategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSubCategoryRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubCategory'
          description: ''
    delete:
      operationId: api_sub_categories_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this Sub Category.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: api_users_list
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /api/users/{username}/:
    get:
      operationId: api_users_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_users_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_users_partial_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/me/:
    get:
      operationId: api_users_me_retrieve
      tags:
      - api
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /auth-token/:
    post:
      operationId: auth_token_create
      tags:
      - auth-token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
        required: true
      security:
      - cookieAuth: []
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
components:
  schemas:
    AuthToken:
      type: object
      properties:
        token:
          type: string
          readOnly: true
      required:
      - token
    AuthTokenRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    Category:
      type: object
      properties:
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        is_active:
          type: boolean
      required:
      - created_at
      - name
      - slug
      - updated_at
    CategoryRequest:
      type: object
      properties:
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
        is_active:
          type: boolean
      required:
      - name
      - slug
    Listing:
      type: object
      properties:
        id:
          type: string
          format: uuid
        views:
          allOf:
          - $ref: '#/components/schemas/ListingView'
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        status:
          type: string
          readOnly: true
          description: '[(''DF'', ''Draft''), (''PB'', ''Published''), (''DN'', ''Denied'')]'
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        user:
          type: integer
        sub_category:
          type: string
      required:
      - id
      - price
      - status
      - sub_category
      - title
      - user
      - views
    ListingRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        user:
          type: integer
        sub_category:
          type: string
          minLength: 1
      required:
      - id
      - price
      - sub_category
      - title
      - user
    ListingView:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        daily:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        weekly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        monthly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        yearly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        total:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        listing:
          type: string
          format: uuid
      required:
      - id
      - listing
    ListingViewRequest:
      type: object
      properties:
        daily:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        weekly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        monthly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        yearly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        total:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        listing:
          type: string
          format: uuid
      required:
      - listing
    PatchedCategoryRequest:
      type: object
      properties:
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
        is_active:
          type: boolean
    PatchedListingRequest:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        user:
          type: integer
        sub_category:
          type: string
          minLength: 1
    PatchedListingViewRequest:
      type: object
      properties:
        daily:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        weekly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        monthly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        yearly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        total:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        listing:
          type: string
          format: uuid
    PatchedReviewRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        user:
          type: integer
        listing:
          type: string
          format: uuid
          nullable: true
    PatchedSubCategoryRequest:
      type: object
      properties:
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
        is_active:
          type: boolean
        category:
          type: string
          minLength: 1
    PatchedUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        name:
          type: string
          title: Name of User
          maxLength: 255
    Review:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          type: string
          readOnly: true
          description: '[(''DF'', ''Draft''), (''PB'', ''Published''), (''DN'', ''Denied'')]'
        user:
          type: integer
        listing:
          type: string
          format: uuid
          nullable: true
      required:
      - created_at
      - id
      - status
      - title
      - updated_at
      - user
    ReviewRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        user:
          type: integer
        listing:
          type: string
          format: uuid
          nullable: true
      required:
      - title
      - user
    SubCategory:
      type: object
      properties:
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        is_active:
          type: boolean
        category:
          type: string
      required:
      - category
      - created_at
      - name
      - slug
      - updated_at
    SubCategoryRequest:
      type: object
      properties:
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
        is_active:
          type: boolean
        category:
          type: string
          minLength: 1
      required:
      - category
      - name
      - slug
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        name:
          type: string
          title: Name of User
          maxLength: 255
        url:
          type: string
          format: uri
          readOnly: true
      required:
      - url
      - username
    UserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        name:
          type: string
          title: Name of User
          maxLength: 255
      required:
      - username
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: sessionid
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
servers:
- url: http://127.0.0.1:8000
  description: Local Development server
- url: https://nejdej.com
  description: Production server
