openapi: 3.0.3
info:
  title: Nejdej API
  version: 1.0.0
  description: Documentation of API endpoints of Nejdej
paths:
  /api/categories/:
    get:
      operationId: api_categories_list
      description: Return a list of all the existing categories.
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
          description: ''
    post:
      operationId: api_categories_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/categories/{slug}/:
    get:
      operationId: api_categories_retrieve
      description: Return the given category.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this Category.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    patch:
      operationId: api_categories_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this Category.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCategoryRequest'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
    delete:
      operationId: api_categories_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this Category.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/categories/nested_subcategories/:
    get:
      operationId: api_categories_nested_subcategories_list
      description: Get Categories with Subcategory nested
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategorySubCategoryNested'
          description: ''
  /api/categories/seed_inital/:
    get:
      operationId: api_categories_seed_inital_retrieve
      description: Seed the database with categories from Bazos.
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
          description: ''
  /api/listing-images/:
    post:
      operationId: api_listing_images_create
      tags:
      - api
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingImageRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingImage'
          description: ''
  /api/listing-images/{id}/:
    get:
      operationId: api_listing_images_retrieve
      description: Return the given listing image.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Listing Image.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingImage'
          description: ''
    patch:
      operationId: api_listing_images_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Listing Image.
        required: true
      tags:
      - api
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedListingImageRequest'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingImage'
          description: ''
    delete:
      operationId: api_listing_images_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Listing Image.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/listing-views/:
    get:
      operationId: api_listing_views_list
      description: Return a list of all the listing views.
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListingView'
          description: ''
    post:
      operationId: api_listing_views_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingViewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListingViewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingViewRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingView'
          description: ''
  /api/listing-views/{id}/:
    get:
      operationId: api_listing_views_retrieve
      description: Return the given listing view.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Listing View.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingView'
          description: ''
    patch:
      operationId: api_listing_views_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Listing View.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedListingViewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedListingViewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedListingViewRequest'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingView'
          description: ''
    delete:
      operationId: api_listing_views_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        description: A unique integer value identifying this Listing View.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/listings/:
    get:
      operationId: api_listings_list
      description: Return a list of all the existing listings.
      parameters:
      - in: query
        name: category_slug
        schema:
          type: string
        description: Exactly matches given category slug
      - in: query
        name: description_search
        schema:
          type: string
        description: Contains given string in description
      - name: itemsPerPage
        required: false
        in: query
        description: "Number of results to return per page. \n Default is 10"
        schema:
          type: integer
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: array
          items:
            type: string
        description: '[(''DF'', ''Draft''), (''PB'', ''Published''), (''DN'', ''Denied'')]'
        explode: true
        style: form
      - in: query
        name: sub_category_slug
        schema:
          type: string
        description: Exactly matches given sub category slug
      - in: query
        name: title_search
        schema:
          type: string
        description: Contains given string in title
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedListingList'
          description: ''
    post:
      operationId: api_listings_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ListingRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ListingRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
          description: ''
  /api/listings/{id}/:
    get:
      operationId: api_listings_retrieve
      description: Return the given listing.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Listing.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
          description: ''
    patch:
      operationId: api_listings_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Listing.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedListingRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedListingRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedListingRequest'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Listing'
          description: ''
    delete:
      operationId: api_listings_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Listing.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/reviews/:
    get:
      operationId: api_reviews_list
      description: Return a list of all the existing reviews.
      parameters:
      - name: itemsPerPage
        required: false
        in: query
        description: "Number of results to return per page. \n Default is 10"
        schema:
          type: integer
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReviewList'
          description: ''
    post:
      operationId: api_reviews_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
  /api/reviews/{id}/:
    get:
      operationId: api_reviews_retrieve
      description: Return the given review.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    patch:
      operationId: api_reviews_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedReviewRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedReviewRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedReviewRequest'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
          description: ''
    delete:
      operationId: api_reviews_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this Review.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/sub-categories/:
    get:
      operationId: api_sub_categories_list
      description: Return a list of all the existing Subcategories.
      parameters:
      - in: query
        name: category
        schema:
          type: string
      - in: query
        name: description__contains
        schema:
          type: string
      - in: query
        name: is_active
        schema:
          type: boolean
      - in: query
        name: name
        schema:
          type: string
      - in: query
        name: name__contains
        schema:
          type: string
      - name: ordering
        required: false
        in: query
        description: Which field to use when ordering the results.
        schema:
          type: string
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SubCategory'
          description: ''
    post:
      operationId: api_sub_categories_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubCategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SubCategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubCategoryRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubCategory'
          description: ''
  /api/sub-categories/{slug}/:
    get:
      operationId: api_sub_categories_retrieve
      description: Return the given Subcategory.
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this Sub Category.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubCategory'
          description: ''
    patch:
      operationId: api_sub_categories_partial_update
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this Sub Category.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSubCategoryRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedSubCategoryRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSubCategoryRequest'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubCategory'
          description: ''
    delete:
      operationId: api_sub_categories_destroy
      parameters:
      - in: path
        name: slug
        schema:
          type: string
        description: A unique value identifying this Sub Category.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '204':
          description: No response body
  /api/users/:
    get:
      operationId: api_users_list
      parameters:
      - name: itemsPerPage
        required: false
        in: query
        description: "Number of results to return per page. \n Default is 10"
        schema:
          type: integer
      - name: page
        required: false
        in: query
        description: A page number within the paginated result set.
        schema:
          type: integer
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUserList'
          description: ''
  /api/users/{username}/:
    get:
      operationId: api_users_retrieve
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: api_users_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: api_users_partial_update
      parameters:
      - in: path
        name: username
        schema:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
        required: true
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserRequest'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /api/users/me/:
    get:
      operationId: api_users_me_retrieve
      tags:
      - api
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /auth-token/:
    post:
      operationId: auth_token_create
      tags:
      - auth-token
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
          application/json:
            schema:
              $ref: '#/components/schemas/AuthTokenRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /dj-rest-auth/login/:
    post:
      operationId: dj_rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /dj-rest-auth/logout/:
    post:
      operationId: dj_rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - dj-rest-auth
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/change/:
    post:
      operationId: dj_rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChangeRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/reset/:
    post:
      operationId: dj_rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/reset/confirm/:
    post:
      operationId: dj_rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirmRequest'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/user/:
    get:
      operationId: dj_rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: dj_rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetailsRequest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: dj_rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetailsRequest'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /rest-auth/facebook/:
    post:
      operationId: rest_auth_facebook_create
      description: Post access token provided by facebook and receive auth token
      tags:
      - rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialLoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialLoginRequest'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
  /rest-auth/google/:
    post:
      operationId: rest_auth_google_create
      description: Post access token provided by google and receive auth token
      tags:
      - rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SocialLoginRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/SocialLoginRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SocialLoginRequest'
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
          description: ''
components:
  schemas:
    AuthToken:
      type: object
      properties:
        token:
          type: string
          readOnly: true
      required:
      - token
    AuthTokenRequest:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
          minLength: 1
        password:
          type: string
          writeOnly: true
          minLength: 1
      required:
      - password
      - username
    Category:
      type: object
      properties:
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        is_active:
          type: boolean
      required:
      - created_at
      - name
      - slug
      - updated_at
    CategoryRequest:
      type: object
      properties:
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
        is_active:
          type: boolean
      required:
      - name
      - slug
    CategorySubCategoryNested:
      type: object
      properties:
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        subcategories:
          type: array
          items:
            $ref: '#/components/schemas/SubCategory'
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        is_active:
          type: boolean
      required:
      - created_at
      - name
      - slug
      - subcategories
      - updated_at
    Listing:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        views:
          allOf:
          - $ref: '#/components/schemas/ListingView'
          readOnly: true
        listing_images:
          type: array
          items:
            $ref: '#/components/schemas/ListingImage'
        user:
          allOf:
          - $ref: '#/components/schemas/ListingUser'
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          type: string
          readOnly: true
          description: '[(''DF'', ''Draft''), (''PB'', ''Published''), (''DN'', ''Denied'')]'
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        sub_category:
          type: string
      required:
      - id
      - listing_images
      - price
      - status
      - sub_category
      - title
      - user
      - views
    ListingImage:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        listing:
          type: string
          format: uuid
          readOnly: true
        image:
          type: string
          format: uri
      required:
      - id
      - image
      - listing
    ListingImageRequest:
      type: object
      properties:
        image:
          type: string
          format: binary
      required:
      - image
    ListingRequest:
      type: object
      properties:
        listing_images:
          type: array
          items:
            $ref: '#/components/schemas/ListingImageRequest'
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        sub_category:
          type: string
          minLength: 1
      required:
      - listing_images
      - price
      - sub_category
      - title
    ListingUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        first_name:
          type: string
          title: First name of User
          maxLength: 255
        last_name:
          type: string
          nullable: true
          title: Last name of User
          maxLength: 255
        image:
          type: string
          format: uri
          nullable: true
      required:
      - id
    ListingUserRequest:
      type: object
      properties:
        first_name:
          type: string
          title: First name of User
          maxLength: 255
        last_name:
          type: string
          nullable: true
          title: Last name of User
          maxLength: 255
        image:
          type: string
          format: binary
          nullable: true
    ListingView:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        daily:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        weekly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        monthly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        yearly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        total:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        listing:
          type: string
          format: uuid
      required:
      - id
      - listing
    ListingViewRequest:
      type: object
      properties:
        daily:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        weekly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        monthly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        yearly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        total:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        listing:
          type: string
          format: uuid
      required:
      - listing
    Login:
      type: object
      properties:
        key:
          type: string
      required:
      - key
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 1
      required:
      - password
    PaginatedListingList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Listing'
    PaginatedReviewList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/Review'
    PaginatedUserList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=4
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?page=2
        results:
          type: array
          items:
            $ref: '#/components/schemas/User'
    PasswordChangeRequest:
      type: object
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordResetConfirmRequest:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          minLength: 1
          maxLength: 128
        new_password2:
          type: string
          minLength: 1
          maxLength: 128
        uid:
          type: string
          minLength: 1
        token:
          type: string
          minLength: 1
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PasswordResetRequest:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
          minLength: 1
      required:
      - email
    PatchedCategoryRequest:
      type: object
      properties:
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
        is_active:
          type: boolean
    PatchedListingImageRequest:
      type: object
      properties:
        image:
          type: string
          format: binary
    PatchedListingRequest:
      type: object
      properties:
        listing_images:
          type: array
          items:
            $ref: '#/components/schemas/ListingImageRequest'
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        price:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        sub_category:
          type: string
          minLength: 1
    PatchedListingViewRequest:
      type: object
      properties:
        daily:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        weekly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        monthly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        yearly:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        total:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        listing:
          type: string
          format: uuid
    PatchedReviewRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        user:
          type: integer
        listing:
          type: string
          format: uuid
          nullable: true
    PatchedSubCategoryRequest:
      type: object
      properties:
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
        is_active:
          type: boolean
        category:
          type: string
          minLength: 1
    PatchedUserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: First name of User
          maxLength: 255
        last_name:
          type: string
          nullable: true
          title: Last name of User
          maxLength: 255
    PatchedUserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: First name of User
          maxLength: 255
        last_name:
          type: string
          nullable: true
          title: Last name of User
          maxLength: 255
        image:
          type: string
          format: binary
          nullable: true
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Review:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        status:
          type: string
          readOnly: true
          description: '[(''DF'', ''Draft''), (''PB'', ''Published''), (''DN'', ''Denied'')]'
        user:
          type: integer
        listing:
          type: string
          format: uuid
          nullable: true
      required:
      - created_at
      - id
      - status
      - title
      - updated_at
      - user
    ReviewRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        user:
          type: integer
        listing:
          type: string
          format: uuid
          nullable: true
      required:
      - title
      - user
    SocialLoginRequest:
      type: object
      properties:
        access_token:
          type: string
        code:
          type: string
        id_token:
          type: string
    SubCategory:
      type: object
      properties:
        slug:
          type: string
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        created_at:
          type: string
          format: date-time
          readOnly: true
        updated_at:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: uri
          nullable: true
        is_active:
          type: boolean
        category:
          type: string
      required:
      - category
      - created_at
      - name
      - slug
      - updated_at
    SubCategoryRequest:
      type: object
      properties:
        slug:
          type: string
          minLength: 1
          maxLength: 255
          pattern: ^[-a-zA-Z0-9_]+$
        name:
          type: string
          minLength: 1
          maxLength: 255
        description:
          type: string
          nullable: true
        image:
          type: string
          format: binary
          nullable: true
        is_active:
          type: boolean
        category:
          type: string
          minLength: 1
      required:
      - category
      - name
      - slug
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    User:
      type: object
      properties:
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: First name of User
          maxLength: 255
        last_name:
          type: string
          nullable: true
          title: Last name of User
          maxLength: 255
        url:
          type: string
          format: uri
          readOnly: true
        image:
          type: string
          format: uri
          nullable: true
      required:
      - url
      - username
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          title: First name of User
          maxLength: 255
        last_name:
          type: string
          nullable: true
          title: Last name of User
          maxLength: 255
      required:
      - email
      - pk
      - username
    UserDetailsRequest:
      type: object
      description: User model w/o password
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: First name of User
          maxLength: 255
        last_name:
          type: string
          nullable: true
          title: Last name of User
          maxLength: 255
      required:
      - username
    UserRequest:
      type: object
      properties:
        username:
          type: string
          minLength: 1
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          title: First name of User
          maxLength: 255
        last_name:
          type: string
          nullable: true
          title: Last name of User
          maxLength: 255
        image:
          type: string
          format: binary
          nullable: true
      required:
      - username
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
servers:
- url: http://127.0.0.1:8000
  description: Local Development server
- url: https://nejdej.com
  description: Production server
