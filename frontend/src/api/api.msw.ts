/**
 * Generated by orval v6.8.1 🍺
 * Do not edit manually.
 * Nejdej API
 * Documentation of API endpoints of Nejdej
 * OpenAPI spec version: 1.0.0
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getApiCategoriesListMock = () =>
  [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    slug: faker.random.word(),
    created_at: faker.random.word(),
    updated_at: faker.random.word(),
    name: faker.random.word(),
    description: faker.random.arrayElement([
      faker.random.arrayElement([faker.random.word(), null]),
      undefined,
    ]),
    image: faker.random.arrayElement([
      faker.random.arrayElement([faker.random.word(), null]),
      undefined,
    ]),
    is_active: faker.random.arrayElement([faker.datatype.boolean(), undefined]),
  }));

export const getApiCategoriesCreateMock = () => ({
  slug: faker.random.word(),
  created_at: faker.random.word(),
  updated_at: faker.random.word(),
  name: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  image: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  is_active: faker.random.arrayElement([faker.datatype.boolean(), undefined]),
});

export const getApiCategoriesRetrieveMock = () => ({
  slug: faker.random.word(),
  created_at: faker.random.word(),
  updated_at: faker.random.word(),
  name: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  image: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  is_active: faker.random.arrayElement([faker.datatype.boolean(), undefined]),
});

export const getApiCategoriesPartialUpdateMock = () => ({
  slug: faker.random.word(),
  created_at: faker.random.word(),
  updated_at: faker.random.word(),
  name: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  image: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  is_active: faker.random.arrayElement([faker.datatype.boolean(), undefined]),
});

export const getApiCategoriesSeedInitalRetrieveMock = () => ({
  slug: faker.random.word(),
  created_at: faker.random.word(),
  updated_at: faker.random.word(),
  name: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  image: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  is_active: faker.random.arrayElement([faker.datatype.boolean(), undefined]),
});

export const getApiListingViewsListMock = () =>
  [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: faker.datatype.number(),
    daily: faker.random.arrayElement([faker.datatype.number(), undefined]),
    weekly: faker.random.arrayElement([faker.datatype.number(), undefined]),
    monthly: faker.random.arrayElement([faker.datatype.number(), undefined]),
    yearly: faker.random.arrayElement([faker.datatype.number(), undefined]),
    total: faker.random.arrayElement([faker.datatype.number(), undefined]),
    listing: faker.random.word(),
  }));

export const getApiListingViewsCreateMock = () => ({
  id: faker.datatype.number(),
  daily: faker.random.arrayElement([faker.datatype.number(), undefined]),
  weekly: faker.random.arrayElement([faker.datatype.number(), undefined]),
  monthly: faker.random.arrayElement([faker.datatype.number(), undefined]),
  yearly: faker.random.arrayElement([faker.datatype.number(), undefined]),
  total: faker.random.arrayElement([faker.datatype.number(), undefined]),
  listing: faker.random.word(),
});

export const getApiListingViewsRetrieveMock = () => ({
  id: faker.datatype.number(),
  daily: faker.random.arrayElement([faker.datatype.number(), undefined]),
  weekly: faker.random.arrayElement([faker.datatype.number(), undefined]),
  monthly: faker.random.arrayElement([faker.datatype.number(), undefined]),
  yearly: faker.random.arrayElement([faker.datatype.number(), undefined]),
  total: faker.random.arrayElement([faker.datatype.number(), undefined]),
  listing: faker.random.word(),
});

export const getApiListingViewsPartialUpdateMock = () => ({
  id: faker.datatype.number(),
  daily: faker.random.arrayElement([faker.datatype.number(), undefined]),
  weekly: faker.random.arrayElement([faker.datatype.number(), undefined]),
  monthly: faker.random.arrayElement([faker.datatype.number(), undefined]),
  yearly: faker.random.arrayElement([faker.datatype.number(), undefined]),
  total: faker.random.arrayElement([faker.datatype.number(), undefined]),
  listing: faker.random.word(),
});

export const getApiListingsListMock = () =>
  [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: faker.random.word(),
    views: {
      id: faker.datatype.number(),
      daily: faker.random.arrayElement([faker.datatype.number(), undefined]),
      weekly: faker.random.arrayElement([faker.datatype.number(), undefined]),
      monthly: faker.random.arrayElement([faker.datatype.number(), undefined]),
      yearly: faker.random.arrayElement([faker.datatype.number(), undefined]),
      total: faker.random.arrayElement([faker.datatype.number(), undefined]),
      listing: faker.random.word(),
    },
    title: faker.random.word(),
    description: faker.random.arrayElement([
      faker.random.arrayElement([faker.random.word(), null]),
      undefined,
    ]),
    image: faker.random.arrayElement([
      faker.random.arrayElement([faker.random.word(), null]),
      undefined,
    ]),
    status: faker.random.word(),
    price: faker.random.word(),
    user: faker.datatype.number(),
    sub_category: faker.random.word(),
  }));

export const getApiListingsCreateMock = () => ({
  id: faker.random.word(),
  views: {
    id: faker.datatype.number(),
    daily: faker.random.arrayElement([faker.datatype.number(), undefined]),
    weekly: faker.random.arrayElement([faker.datatype.number(), undefined]),
    monthly: faker.random.arrayElement([faker.datatype.number(), undefined]),
    yearly: faker.random.arrayElement([faker.datatype.number(), undefined]),
    total: faker.random.arrayElement([faker.datatype.number(), undefined]),
    listing: faker.random.word(),
  },
  title: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  image: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  status: faker.random.word(),
  price: faker.random.word(),
  user: faker.datatype.number(),
  sub_category: faker.random.word(),
});

export const getApiListingsRetrieveMock = () => ({
  id: faker.random.word(),
  views: {
    id: faker.datatype.number(),
    daily: faker.random.arrayElement([faker.datatype.number(), undefined]),
    weekly: faker.random.arrayElement([faker.datatype.number(), undefined]),
    monthly: faker.random.arrayElement([faker.datatype.number(), undefined]),
    yearly: faker.random.arrayElement([faker.datatype.number(), undefined]),
    total: faker.random.arrayElement([faker.datatype.number(), undefined]),
    listing: faker.random.word(),
  },
  title: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  image: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  status: faker.random.word(),
  price: faker.random.word(),
  user: faker.datatype.number(),
  sub_category: faker.random.word(),
});

export const getApiListingsPartialUpdateMock = () => ({
  id: faker.random.word(),
  views: {
    id: faker.datatype.number(),
    daily: faker.random.arrayElement([faker.datatype.number(), undefined]),
    weekly: faker.random.arrayElement([faker.datatype.number(), undefined]),
    monthly: faker.random.arrayElement([faker.datatype.number(), undefined]),
    yearly: faker.random.arrayElement([faker.datatype.number(), undefined]),
    total: faker.random.arrayElement([faker.datatype.number(), undefined]),
    listing: faker.random.word(),
  },
  title: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  image: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  status: faker.random.word(),
  price: faker.random.word(),
  user: faker.datatype.number(),
  sub_category: faker.random.word(),
});

export const getApiReviewsListMock = () =>
  [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    id: faker.datatype.number(),
    created_at: faker.random.word(),
    updated_at: faker.random.word(),
    title: faker.random.word(),
    description: faker.random.arrayElement([
      faker.random.arrayElement([faker.random.word(), null]),
      undefined,
    ]),
    status: faker.random.word(),
    user: faker.datatype.number(),
    listing: faker.random.arrayElement([
      faker.random.arrayElement([faker.random.word(), null]),
      undefined,
    ]),
  }));

export const getApiReviewsCreateMock = () => ({
  id: faker.datatype.number(),
  created_at: faker.random.word(),
  updated_at: faker.random.word(),
  title: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  status: faker.random.word(),
  user: faker.datatype.number(),
  listing: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
});

export const getApiReviewsRetrieveMock = () => ({
  id: faker.datatype.number(),
  created_at: faker.random.word(),
  updated_at: faker.random.word(),
  title: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  status: faker.random.word(),
  user: faker.datatype.number(),
  listing: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
});

export const getApiReviewsPartialUpdateMock = () => ({
  id: faker.datatype.number(),
  created_at: faker.random.word(),
  updated_at: faker.random.word(),
  title: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  status: faker.random.word(),
  user: faker.datatype.number(),
  listing: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
});

export const getApiSubCategoriesListMock = () =>
  [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    slug: faker.random.word(),
    created_at: faker.random.word(),
    updated_at: faker.random.word(),
    name: faker.random.word(),
    description: faker.random.arrayElement([
      faker.random.arrayElement([faker.random.word(), null]),
      undefined,
    ]),
    image: faker.random.arrayElement([
      faker.random.arrayElement([faker.random.word(), null]),
      undefined,
    ]),
    is_active: faker.random.arrayElement([faker.datatype.boolean(), undefined]),
    category: faker.random.word(),
  }));

export const getApiSubCategoriesCreateMock = () => ({
  slug: faker.random.word(),
  created_at: faker.random.word(),
  updated_at: faker.random.word(),
  name: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  image: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  is_active: faker.random.arrayElement([faker.datatype.boolean(), undefined]),
  category: faker.random.word(),
});

export const getApiSubCategoriesRetrieveMock = () => ({
  slug: faker.random.word(),
  created_at: faker.random.word(),
  updated_at: faker.random.word(),
  name: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  image: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  is_active: faker.random.arrayElement([faker.datatype.boolean(), undefined]),
  category: faker.random.word(),
});

export const getApiSubCategoriesPartialUpdateMock = () => ({
  slug: faker.random.word(),
  created_at: faker.random.word(),
  updated_at: faker.random.word(),
  name: faker.random.word(),
  description: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  image: faker.random.arrayElement([
    faker.random.arrayElement([faker.random.word(), null]),
    undefined,
  ]),
  is_active: faker.random.arrayElement([faker.datatype.boolean(), undefined]),
  category: faker.random.word(),
});

export const getApiUsersListMock = () =>
  [...Array(faker.datatype.number({ min: 1, max: 10 }))].map(() => ({
    username: faker.random.word(),
    name: faker.random.arrayElement([faker.random.word(), undefined]),
    url: faker.random.word(),
  }));

export const getApiUsersRetrieveMock = () => ({
  username: faker.random.word(),
  name: faker.random.arrayElement([faker.random.word(), undefined]),
  url: faker.random.word(),
});

export const getApiUsersUpdateMock = () => ({
  username: faker.random.word(),
  name: faker.random.arrayElement([faker.random.word(), undefined]),
  url: faker.random.word(),
});

export const getApiUsersPartialUpdateMock = () => ({
  username: faker.random.word(),
  name: faker.random.arrayElement([faker.random.word(), undefined]),
  url: faker.random.word(),
});

export const getApiUsersMeRetrieveMock = () => ({
  username: faker.random.word(),
  name: faker.random.arrayElement([faker.random.word(), undefined]),
  url: faker.random.word(),
});

export const getApiMSW = () => [
  rest.get('*/api/categories', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiCategoriesListMock())
    );
  }),
  rest.post('*/api/categories', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiCategoriesCreateMock())
    );
  }),
  rest.get('*/api/categories/:slug', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiCategoriesRetrieveMock())
    );
  }),
  rest.patch('*/api/categories/:slug', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiCategoriesPartialUpdateMock())
    );
  }),
  rest.delete('*/api/categories/:slug', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/api/categories/seed_inital', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiCategoriesSeedInitalRetrieveMock())
    );
  }),
  rest.get('*/api/listing-views', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiListingViewsListMock())
    );
  }),
  rest.post('*/api/listing-views', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiListingViewsCreateMock())
    );
  }),
  rest.get('*/api/listing-views/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiListingViewsRetrieveMock())
    );
  }),
  rest.patch('*/api/listing-views/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiListingViewsPartialUpdateMock())
    );
  }),
  rest.delete('*/api/listing-views/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/api/listings', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiListingsListMock())
    );
  }),
  rest.post('*/api/listings', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiListingsCreateMock())
    );
  }),
  rest.get('*/api/listings/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiListingsRetrieveMock())
    );
  }),
  rest.patch('*/api/listings/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiListingsPartialUpdateMock())
    );
  }),
  rest.delete('*/api/listings/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/api/reviews', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiReviewsListMock())
    );
  }),
  rest.post('*/api/reviews', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiReviewsCreateMock())
    );
  }),
  rest.get('*/api/reviews/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiReviewsRetrieveMock())
    );
  }),
  rest.patch('*/api/reviews/:id', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiReviewsPartialUpdateMock())
    );
  }),
  rest.delete('*/api/reviews/:id', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/api/sub-categories', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiSubCategoriesListMock())
    );
  }),
  rest.post('*/api/sub-categories', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiSubCategoriesCreateMock())
    );
  }),
  rest.get('*/api/sub-categories/:slug', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiSubCategoriesRetrieveMock())
    );
  }),
  rest.patch('*/api/sub-categories/:slug', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiSubCategoriesPartialUpdateMock())
    );
  }),
  rest.delete('*/api/sub-categories/:slug', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
  }),
  rest.get('*/api/users', (_req, res, ctx) => {
    return res(ctx.delay(1000), ctx.status(200, 'Mocked status'), ctx.json(getApiUsersListMock()));
  }),
  rest.get('*/api/users/:username', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiUsersRetrieveMock())
    );
  }),
  rest.put('*/api/users/:username', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiUsersUpdateMock())
    );
  }),
  rest.patch('*/api/users/:username', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiUsersPartialUpdateMock())
    );
  }),
  rest.get('*/api/users/me', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getApiUsersMeRetrieveMock())
    );
  }),
];
