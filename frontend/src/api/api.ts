/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Nejdej API
 * Documentation of API endpoints of Nejdej
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useInfiniteQuery,
  useMutation,
  UseQueryOptions,
  UseInfiniteQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  UseInfiniteQueryResult,
  QueryKey
} from 'react-query'
import type {
  Category,
  CategoryRequest,
  PatchedCategoryRequest,
  CategorySubCategoryNested,
  ListingImage,
  ListingImageRequest,
  PatchedListingImageRequest,
  ListingView,
  ListingViewRequest,
  PatchedListingViewRequest,
  PaginatedListingList,
  ApiListingsListParams,
  Listing,
  ListingRequest,
  PatchedListingRequest,
  PaginatedReviewList,
  ApiReviewsListParams,
  Review,
  ReviewRequest,
  PatchedReviewRequest,
  SubCategory,
  ApiSubCategoriesListParams,
  SubCategoryRequest,
  PatchedSubCategoryRequest,
  PaginatedUserList,
  ApiUsersListParams,
  User,
  UserRequest,
  PatchedUserRequest
} from '.././model'
import { customInstance } from '.././api/custom-instance'

type AwaitedInput<T> = PromiseLike<T> | T;

      type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;


/**
 * Return a list of all the existing categories.
 */
export const apiCategoriesList = (
    
 signal?: AbortSignal
) => {
      return customInstance<Category[]>(
      {url: `/api/categories/`, method: 'get', signal
    },
      );
    }
  

export const getApiCategoriesListQueryKey = () => [`/api/categories/`];

    
export type ApiCategoriesListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiCategoriesList>>>
export type ApiCategoriesListInfiniteQueryError = unknown

export const useApiCategoriesListInfinite = <TData = Awaited<ReturnType<typeof apiCategoriesList>>, TError = unknown>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiCategoriesList>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiCategoriesListQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiCategoriesList>>> = ({ signal }) => apiCategoriesList(signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiCategoriesList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiCategoriesListQueryResult = NonNullable<Awaited<ReturnType<typeof apiCategoriesList>>>
export type ApiCategoriesListQueryError = unknown

export const useApiCategoriesList = <TData = Awaited<ReturnType<typeof apiCategoriesList>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiCategoriesList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiCategoriesListQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiCategoriesList>>> = ({ signal }) => apiCategoriesList(signal);

  const query = useQuery<Awaited<ReturnType<typeof apiCategoriesList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiCategoriesCreate = (
    categoryRequest: CategoryRequest,
 
) => {
      return customInstance<Category>(
      {url: `/api/categories/`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: categoryRequest
    },
      );
    }
  


    export type ApiCategoriesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiCategoriesCreate>>>
    export type ApiCategoriesCreateMutationBody = CategoryRequest
    export type ApiCategoriesCreateMutationError = unknown

    export const useApiCategoriesCreate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiCategoriesCreate>>, TError,{data: CategoryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiCategoriesCreate>>, {data: CategoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  apiCategoriesCreate(data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiCategoriesCreate>>, TError, {data: CategoryRequest}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Return the given category.
 */
export const apiCategoriesRetrieve = (
    slug: string,
 signal?: AbortSignal
) => {
      return customInstance<Category>(
      {url: `/api/categories/${slug}/`, method: 'get', signal
    },
      );
    }
  

export const getApiCategoriesRetrieveQueryKey = (slug: string,) => [`/api/categories/${slug}/`];

    
export type ApiCategoriesRetrieveInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiCategoriesRetrieve>>>
export type ApiCategoriesRetrieveInfiniteQueryError = unknown

export const useApiCategoriesRetrieveInfinite = <TData = Awaited<ReturnType<typeof apiCategoriesRetrieve>>, TError = unknown>(
 slug: string, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiCategoriesRetrieve>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiCategoriesRetrieveQueryKey(slug);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiCategoriesRetrieve>>> = ({ signal }) => apiCategoriesRetrieve(slug, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiCategoriesRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(slug),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiCategoriesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiCategoriesRetrieve>>>
export type ApiCategoriesRetrieveQueryError = unknown

export const useApiCategoriesRetrieve = <TData = Awaited<ReturnType<typeof apiCategoriesRetrieve>>, TError = unknown>(
 slug: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiCategoriesRetrieve>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiCategoriesRetrieveQueryKey(slug);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiCategoriesRetrieve>>> = ({ signal }) => apiCategoriesRetrieve(slug, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiCategoriesRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(slug),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiCategoriesPartialUpdate = (
    slug: string,
    patchedCategoryRequest: PatchedCategoryRequest,
 
) => {
      return customInstance<Category>(
      {url: `/api/categories/${slug}/`, method: 'patch',
      headers: {'Content-Type': 'application/json'},
      data: patchedCategoryRequest
    },
      );
    }
  


    export type ApiCategoriesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiCategoriesPartialUpdate>>>
    export type ApiCategoriesPartialUpdateMutationBody = PatchedCategoryRequest
    export type ApiCategoriesPartialUpdateMutationError = unknown

    export const useApiCategoriesPartialUpdate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiCategoriesPartialUpdate>>, TError,{slug: string;data: PatchedCategoryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiCategoriesPartialUpdate>>, {slug: string;data: PatchedCategoryRequest}> = (props) => {
          const {slug,data} = props ?? {};

          return  apiCategoriesPartialUpdate(slug,data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiCategoriesPartialUpdate>>, TError, {slug: string;data: PatchedCategoryRequest}, TContext>(mutationFn, mutationOptions)
    }
    export const apiCategoriesDestroy = (
    slug: string,
 
) => {
      return customInstance<void>(
      {url: `/api/categories/${slug}/`, method: 'delete'
    },
      );
    }
  


    export type ApiCategoriesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof apiCategoriesDestroy>>>
    
    export type ApiCategoriesDestroyMutationError = unknown

    export const useApiCategoriesDestroy = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiCategoriesDestroy>>, TError,{slug: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiCategoriesDestroy>>, {slug: string}> = (props) => {
          const {slug} = props ?? {};

          return  apiCategoriesDestroy(slug,)
        }

      return useMutation<Awaited<ReturnType<typeof apiCategoriesDestroy>>, TError, {slug: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Get Categories with Subcategory nested
 */
export const apiCategoriesNestedSubcategoriesList = (
    
 signal?: AbortSignal
) => {
      return customInstance<CategorySubCategoryNested[]>(
      {url: `/api/categories/nested_subcategories/`, method: 'get', signal
    },
      );
    }
  

export const getApiCategoriesNestedSubcategoriesListQueryKey = () => [`/api/categories/nested_subcategories/`];

    
export type ApiCategoriesNestedSubcategoriesListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiCategoriesNestedSubcategoriesList>>>
export type ApiCategoriesNestedSubcategoriesListInfiniteQueryError = unknown

export const useApiCategoriesNestedSubcategoriesListInfinite = <TData = Awaited<ReturnType<typeof apiCategoriesNestedSubcategoriesList>>, TError = unknown>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiCategoriesNestedSubcategoriesList>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiCategoriesNestedSubcategoriesListQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiCategoriesNestedSubcategoriesList>>> = ({ signal }) => apiCategoriesNestedSubcategoriesList(signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiCategoriesNestedSubcategoriesList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiCategoriesNestedSubcategoriesListQueryResult = NonNullable<Awaited<ReturnType<typeof apiCategoriesNestedSubcategoriesList>>>
export type ApiCategoriesNestedSubcategoriesListQueryError = unknown

export const useApiCategoriesNestedSubcategoriesList = <TData = Awaited<ReturnType<typeof apiCategoriesNestedSubcategoriesList>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiCategoriesNestedSubcategoriesList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiCategoriesNestedSubcategoriesListQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiCategoriesNestedSubcategoriesList>>> = ({ signal }) => apiCategoriesNestedSubcategoriesList(signal);

  const query = useQuery<Awaited<ReturnType<typeof apiCategoriesNestedSubcategoriesList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

/**
 * Seed the database with categories from Bazos.
 */
export const apiCategoriesSeedInitalRetrieve = (
    
 signal?: AbortSignal
) => {
      return customInstance<Category>(
      {url: `/api/categories/seed_inital/`, method: 'get', signal
    },
      );
    }
  

export const getApiCategoriesSeedInitalRetrieveQueryKey = () => [`/api/categories/seed_inital/`];

    
export type ApiCategoriesSeedInitalRetrieveInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>>
export type ApiCategoriesSeedInitalRetrieveInfiniteQueryError = unknown

export const useApiCategoriesSeedInitalRetrieveInfinite = <TData = Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>, TError = unknown>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiCategoriesSeedInitalRetrieveQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>> = ({ signal }) => apiCategoriesSeedInitalRetrieve(signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiCategoriesSeedInitalRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>>
export type ApiCategoriesSeedInitalRetrieveQueryError = unknown

export const useApiCategoriesSeedInitalRetrieve = <TData = Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiCategoriesSeedInitalRetrieveQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>> = ({ signal }) => apiCategoriesSeedInitalRetrieve(signal);

  const query = useQuery<Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiListingImagesCreate = (
    listingImageRequest: ListingImageRequest,
 
) => {const formData = new FormData();
formData.append('image', listingImageRequest.image)

      return customInstance<ListingImage>(
      {url: `/api/listing-images/`, method: 'post',
      headers: {'Content-Type': 'multipart/form-data'},
       data: formData
    },
      );
    }
  


    export type ApiListingImagesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiListingImagesCreate>>>
    export type ApiListingImagesCreateMutationBody = ListingImageRequest
    export type ApiListingImagesCreateMutationError = unknown

    export const useApiListingImagesCreate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiListingImagesCreate>>, TError,{data: ListingImageRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiListingImagesCreate>>, {data: ListingImageRequest}> = (props) => {
          const {data} = props ?? {};

          return  apiListingImagesCreate(data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiListingImagesCreate>>, TError, {data: ListingImageRequest}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Return the given listing image.
 */
export const apiListingImagesRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      return customInstance<ListingImage>(
      {url: `/api/listing-images/${id}/`, method: 'get', signal
    },
      );
    }
  

export const getApiListingImagesRetrieveQueryKey = (id: string,) => [`/api/listing-images/${id}/`];

    
export type ApiListingImagesRetrieveInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiListingImagesRetrieve>>>
export type ApiListingImagesRetrieveInfiniteQueryError = unknown

export const useApiListingImagesRetrieveInfinite = <TData = Awaited<ReturnType<typeof apiListingImagesRetrieve>>, TError = unknown>(
 id: string, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiListingImagesRetrieve>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiListingImagesRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingImagesRetrieve>>> = ({ signal }) => apiListingImagesRetrieve(id, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiListingImagesRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiListingImagesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiListingImagesRetrieve>>>
export type ApiListingImagesRetrieveQueryError = unknown

export const useApiListingImagesRetrieve = <TData = Awaited<ReturnType<typeof apiListingImagesRetrieve>>, TError = unknown>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiListingImagesRetrieve>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiListingImagesRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingImagesRetrieve>>> = ({ signal }) => apiListingImagesRetrieve(id, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiListingImagesRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiListingImagesPartialUpdate = (
    id: string,
    patchedListingImageRequest: PatchedListingImageRequest,
 
) => {const formData = new FormData();
if(patchedListingImageRequest.image !== undefined) {
 formData.append('image', patchedListingImageRequest.image)
 }

      return customInstance<ListingImage>(
      {url: `/api/listing-images/${id}/`, method: 'patch',
      headers: {'Content-Type': 'multipart/form-data'},
       data: formData
    },
      );
    }
  


    export type ApiListingImagesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiListingImagesPartialUpdate>>>
    export type ApiListingImagesPartialUpdateMutationBody = PatchedListingImageRequest
    export type ApiListingImagesPartialUpdateMutationError = unknown

    export const useApiListingImagesPartialUpdate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiListingImagesPartialUpdate>>, TError,{id: string;data: PatchedListingImageRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiListingImagesPartialUpdate>>, {id: string;data: PatchedListingImageRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  apiListingImagesPartialUpdate(id,data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiListingImagesPartialUpdate>>, TError, {id: string;data: PatchedListingImageRequest}, TContext>(mutationFn, mutationOptions)
    }
    export const apiListingImagesDestroy = (
    id: string,
 
) => {
      return customInstance<void>(
      {url: `/api/listing-images/${id}/`, method: 'delete'
    },
      );
    }
  


    export type ApiListingImagesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof apiListingImagesDestroy>>>
    
    export type ApiListingImagesDestroyMutationError = unknown

    export const useApiListingImagesDestroy = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiListingImagesDestroy>>, TError,{id: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiListingImagesDestroy>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  apiListingImagesDestroy(id,)
        }

      return useMutation<Awaited<ReturnType<typeof apiListingImagesDestroy>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Return a list of all the listing views.
 */
export const apiListingViewsList = (
    
 signal?: AbortSignal
) => {
      return customInstance<ListingView[]>(
      {url: `/api/listing-views/`, method: 'get', signal
    },
      );
    }
  

export const getApiListingViewsListQueryKey = () => [`/api/listing-views/`];

    
export type ApiListingViewsListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiListingViewsList>>>
export type ApiListingViewsListInfiniteQueryError = unknown

export const useApiListingViewsListInfinite = <TData = Awaited<ReturnType<typeof apiListingViewsList>>, TError = unknown>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiListingViewsList>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiListingViewsListQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingViewsList>>> = ({ signal }) => apiListingViewsList(signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiListingViewsList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiListingViewsListQueryResult = NonNullable<Awaited<ReturnType<typeof apiListingViewsList>>>
export type ApiListingViewsListQueryError = unknown

export const useApiListingViewsList = <TData = Awaited<ReturnType<typeof apiListingViewsList>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiListingViewsList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiListingViewsListQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingViewsList>>> = ({ signal }) => apiListingViewsList(signal);

  const query = useQuery<Awaited<ReturnType<typeof apiListingViewsList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiListingViewsCreate = (
    listingViewRequest: ListingViewRequest,
 
) => {
      return customInstance<ListingView>(
      {url: `/api/listing-views/`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: listingViewRequest
    },
      );
    }
  


    export type ApiListingViewsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiListingViewsCreate>>>
    export type ApiListingViewsCreateMutationBody = ListingViewRequest
    export type ApiListingViewsCreateMutationError = unknown

    export const useApiListingViewsCreate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiListingViewsCreate>>, TError,{data: ListingViewRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiListingViewsCreate>>, {data: ListingViewRequest}> = (props) => {
          const {data} = props ?? {};

          return  apiListingViewsCreate(data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiListingViewsCreate>>, TError, {data: ListingViewRequest}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Return the given listing view.
 */
export const apiListingViewsRetrieve = (
    id: number,
 signal?: AbortSignal
) => {
      return customInstance<ListingView>(
      {url: `/api/listing-views/${id}/`, method: 'get', signal
    },
      );
    }
  

export const getApiListingViewsRetrieveQueryKey = (id: number,) => [`/api/listing-views/${id}/`];

    
export type ApiListingViewsRetrieveInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiListingViewsRetrieve>>>
export type ApiListingViewsRetrieveInfiniteQueryError = unknown

export const useApiListingViewsRetrieveInfinite = <TData = Awaited<ReturnType<typeof apiListingViewsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiListingViewsRetrieve>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiListingViewsRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingViewsRetrieve>>> = ({ signal }) => apiListingViewsRetrieve(id, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiListingViewsRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiListingViewsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiListingViewsRetrieve>>>
export type ApiListingViewsRetrieveQueryError = unknown

export const useApiListingViewsRetrieve = <TData = Awaited<ReturnType<typeof apiListingViewsRetrieve>>, TError = unknown>(
 id: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiListingViewsRetrieve>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiListingViewsRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingViewsRetrieve>>> = ({ signal }) => apiListingViewsRetrieve(id, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiListingViewsRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiListingViewsPartialUpdate = (
    id: number,
    patchedListingViewRequest: PatchedListingViewRequest,
 
) => {
      return customInstance<ListingView>(
      {url: `/api/listing-views/${id}/`, method: 'patch',
      headers: {'Content-Type': 'application/json'},
      data: patchedListingViewRequest
    },
      );
    }
  


    export type ApiListingViewsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiListingViewsPartialUpdate>>>
    export type ApiListingViewsPartialUpdateMutationBody = PatchedListingViewRequest
    export type ApiListingViewsPartialUpdateMutationError = unknown

    export const useApiListingViewsPartialUpdate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiListingViewsPartialUpdate>>, TError,{id: number;data: PatchedListingViewRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiListingViewsPartialUpdate>>, {id: number;data: PatchedListingViewRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  apiListingViewsPartialUpdate(id,data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiListingViewsPartialUpdate>>, TError, {id: number;data: PatchedListingViewRequest}, TContext>(mutationFn, mutationOptions)
    }
    export const apiListingViewsDestroy = (
    id: number,
 
) => {
      return customInstance<void>(
      {url: `/api/listing-views/${id}/`, method: 'delete'
    },
      );
    }
  


    export type ApiListingViewsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof apiListingViewsDestroy>>>
    
    export type ApiListingViewsDestroyMutationError = unknown

    export const useApiListingViewsDestroy = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiListingViewsDestroy>>, TError,{id: number}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiListingViewsDestroy>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  apiListingViewsDestroy(id,)
        }

      return useMutation<Awaited<ReturnType<typeof apiListingViewsDestroy>>, TError, {id: number}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Return a list of all the existing listings.
 */
export const apiListingsList = (
    params?: ApiListingsListParams,
 signal?: AbortSignal
) => {
      return customInstance<PaginatedListingList>(
      {url: `/api/listings/`, method: 'get', signal,
        params,
    },
      );
    }
  

export const getApiListingsListQueryKey = (params?: ApiListingsListParams,) => [`/api/listings/`, ...(params ? [params]: [])];

    
export type ApiListingsListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiListingsList>>>
export type ApiListingsListInfiniteQueryError = unknown

export const useApiListingsListInfinite = <TData = Awaited<ReturnType<typeof apiListingsList>>, TError = unknown>(
 params?: ApiListingsListParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiListingsList>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiListingsListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingsList>>> = ({ signal }) => apiListingsList(params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiListingsList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiListingsListQueryResult = NonNullable<Awaited<ReturnType<typeof apiListingsList>>>
export type ApiListingsListQueryError = unknown

export const useApiListingsList = <TData = Awaited<ReturnType<typeof apiListingsList>>, TError = unknown>(
 params?: ApiListingsListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiListingsList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiListingsListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingsList>>> = ({ signal }) => apiListingsList(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiListingsList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiListingsCreate = (
    listingRequest: ListingRequest,
 
) => {
      return customInstance<Listing>(
      {url: `/api/listings/`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: listingRequest
    },
      );
    }
  


    export type ApiListingsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiListingsCreate>>>
    export type ApiListingsCreateMutationBody = ListingRequest
    export type ApiListingsCreateMutationError = unknown

    export const useApiListingsCreate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiListingsCreate>>, TError,{data: ListingRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiListingsCreate>>, {data: ListingRequest}> = (props) => {
          const {data} = props ?? {};

          return  apiListingsCreate(data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiListingsCreate>>, TError, {data: ListingRequest}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Return the given listing.
 */
export const apiListingsRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      return customInstance<Listing>(
      {url: `/api/listings/${id}/`, method: 'get', signal
    },
      );
    }
  

export const getApiListingsRetrieveQueryKey = (id: string,) => [`/api/listings/${id}/`];

    
export type ApiListingsRetrieveInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiListingsRetrieve>>>
export type ApiListingsRetrieveInfiniteQueryError = unknown

export const useApiListingsRetrieveInfinite = <TData = Awaited<ReturnType<typeof apiListingsRetrieve>>, TError = unknown>(
 id: string, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiListingsRetrieve>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiListingsRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingsRetrieve>>> = ({ signal }) => apiListingsRetrieve(id, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiListingsRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiListingsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiListingsRetrieve>>>
export type ApiListingsRetrieveQueryError = unknown

export const useApiListingsRetrieve = <TData = Awaited<ReturnType<typeof apiListingsRetrieve>>, TError = unknown>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiListingsRetrieve>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiListingsRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingsRetrieve>>> = ({ signal }) => apiListingsRetrieve(id, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiListingsRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiListingsPartialUpdate = (
    id: string,
    patchedListingRequest: PatchedListingRequest,
 
) => {
      return customInstance<Listing>(
      {url: `/api/listings/${id}/`, method: 'patch',
      headers: {'Content-Type': 'application/json'},
      data: patchedListingRequest
    },
      );
    }
  


    export type ApiListingsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiListingsPartialUpdate>>>
    export type ApiListingsPartialUpdateMutationBody = PatchedListingRequest
    export type ApiListingsPartialUpdateMutationError = unknown

    export const useApiListingsPartialUpdate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiListingsPartialUpdate>>, TError,{id: string;data: PatchedListingRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiListingsPartialUpdate>>, {id: string;data: PatchedListingRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  apiListingsPartialUpdate(id,data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiListingsPartialUpdate>>, TError, {id: string;data: PatchedListingRequest}, TContext>(mutationFn, mutationOptions)
    }
    export const apiListingsDestroy = (
    id: string,
 
) => {
      return customInstance<void>(
      {url: `/api/listings/${id}/`, method: 'delete'
    },
      );
    }
  


    export type ApiListingsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof apiListingsDestroy>>>
    
    export type ApiListingsDestroyMutationError = unknown

    export const useApiListingsDestroy = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiListingsDestroy>>, TError,{id: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiListingsDestroy>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  apiListingsDestroy(id,)
        }

      return useMutation<Awaited<ReturnType<typeof apiListingsDestroy>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Return a list of all the existing reviews.
 */
export const apiReviewsList = (
    params?: ApiReviewsListParams,
 signal?: AbortSignal
) => {
      return customInstance<PaginatedReviewList>(
      {url: `/api/reviews/`, method: 'get', signal,
        params,
    },
      );
    }
  

export const getApiReviewsListQueryKey = (params?: ApiReviewsListParams,) => [`/api/reviews/`, ...(params ? [params]: [])];

    
export type ApiReviewsListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiReviewsList>>>
export type ApiReviewsListInfiniteQueryError = unknown

export const useApiReviewsListInfinite = <TData = Awaited<ReturnType<typeof apiReviewsList>>, TError = unknown>(
 params?: ApiReviewsListParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiReviewsList>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiReviewsListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiReviewsList>>> = ({ signal }) => apiReviewsList(params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiReviewsList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiReviewsListQueryResult = NonNullable<Awaited<ReturnType<typeof apiReviewsList>>>
export type ApiReviewsListQueryError = unknown

export const useApiReviewsList = <TData = Awaited<ReturnType<typeof apiReviewsList>>, TError = unknown>(
 params?: ApiReviewsListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiReviewsList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiReviewsListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiReviewsList>>> = ({ signal }) => apiReviewsList(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiReviewsList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiReviewsCreate = (
    reviewRequest: ReviewRequest,
 
) => {
      return customInstance<Review>(
      {url: `/api/reviews/`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: reviewRequest
    },
      );
    }
  


    export type ApiReviewsCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiReviewsCreate>>>
    export type ApiReviewsCreateMutationBody = ReviewRequest
    export type ApiReviewsCreateMutationError = unknown

    export const useApiReviewsCreate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiReviewsCreate>>, TError,{data: ReviewRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiReviewsCreate>>, {data: ReviewRequest}> = (props) => {
          const {data} = props ?? {};

          return  apiReviewsCreate(data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiReviewsCreate>>, TError, {data: ReviewRequest}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Return the given review.
 */
export const apiReviewsRetrieve = (
    id: string,
 signal?: AbortSignal
) => {
      return customInstance<Review>(
      {url: `/api/reviews/${id}/`, method: 'get', signal
    },
      );
    }
  

export const getApiReviewsRetrieveQueryKey = (id: string,) => [`/api/reviews/${id}/`];

    
export type ApiReviewsRetrieveInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiReviewsRetrieve>>>
export type ApiReviewsRetrieveInfiniteQueryError = unknown

export const useApiReviewsRetrieveInfinite = <TData = Awaited<ReturnType<typeof apiReviewsRetrieve>>, TError = unknown>(
 id: string, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiReviewsRetrieve>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiReviewsRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiReviewsRetrieve>>> = ({ signal }) => apiReviewsRetrieve(id, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiReviewsRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiReviewsRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiReviewsRetrieve>>>
export type ApiReviewsRetrieveQueryError = unknown

export const useApiReviewsRetrieve = <TData = Awaited<ReturnType<typeof apiReviewsRetrieve>>, TError = unknown>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiReviewsRetrieve>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiReviewsRetrieveQueryKey(id);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiReviewsRetrieve>>> = ({ signal }) => apiReviewsRetrieve(id, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiReviewsRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(id),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiReviewsPartialUpdate = (
    id: string,
    patchedReviewRequest: PatchedReviewRequest,
 
) => {
      return customInstance<Review>(
      {url: `/api/reviews/${id}/`, method: 'patch',
      headers: {'Content-Type': 'application/json'},
      data: patchedReviewRequest
    },
      );
    }
  


    export type ApiReviewsPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiReviewsPartialUpdate>>>
    export type ApiReviewsPartialUpdateMutationBody = PatchedReviewRequest
    export type ApiReviewsPartialUpdateMutationError = unknown

    export const useApiReviewsPartialUpdate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiReviewsPartialUpdate>>, TError,{id: string;data: PatchedReviewRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiReviewsPartialUpdate>>, {id: string;data: PatchedReviewRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  apiReviewsPartialUpdate(id,data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiReviewsPartialUpdate>>, TError, {id: string;data: PatchedReviewRequest}, TContext>(mutationFn, mutationOptions)
    }
    export const apiReviewsDestroy = (
    id: string,
 
) => {
      return customInstance<void>(
      {url: `/api/reviews/${id}/`, method: 'delete'
    },
      );
    }
  


    export type ApiReviewsDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof apiReviewsDestroy>>>
    
    export type ApiReviewsDestroyMutationError = unknown

    export const useApiReviewsDestroy = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiReviewsDestroy>>, TError,{id: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiReviewsDestroy>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  apiReviewsDestroy(id,)
        }

      return useMutation<Awaited<ReturnType<typeof apiReviewsDestroy>>, TError, {id: string}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Return a list of all the existing Subcategories.
 */
export const apiSubCategoriesList = (
    params?: ApiSubCategoriesListParams,
 signal?: AbortSignal
) => {
      return customInstance<SubCategory[]>(
      {url: `/api/sub-categories/`, method: 'get', signal,
        params,
    },
      );
    }
  

export const getApiSubCategoriesListQueryKey = (params?: ApiSubCategoriesListParams,) => [`/api/sub-categories/`, ...(params ? [params]: [])];

    
export type ApiSubCategoriesListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiSubCategoriesList>>>
export type ApiSubCategoriesListInfiniteQueryError = unknown

export const useApiSubCategoriesListInfinite = <TData = Awaited<ReturnType<typeof apiSubCategoriesList>>, TError = unknown>(
 params?: ApiSubCategoriesListParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiSubCategoriesList>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiSubCategoriesListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiSubCategoriesList>>> = ({ signal }) => apiSubCategoriesList(params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiSubCategoriesList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiSubCategoriesListQueryResult = NonNullable<Awaited<ReturnType<typeof apiSubCategoriesList>>>
export type ApiSubCategoriesListQueryError = unknown

export const useApiSubCategoriesList = <TData = Awaited<ReturnType<typeof apiSubCategoriesList>>, TError = unknown>(
 params?: ApiSubCategoriesListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiSubCategoriesList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiSubCategoriesListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiSubCategoriesList>>> = ({ signal }) => apiSubCategoriesList(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiSubCategoriesList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiSubCategoriesCreate = (
    subCategoryRequest: SubCategoryRequest,
 
) => {
      return customInstance<SubCategory>(
      {url: `/api/sub-categories/`, method: 'post',
      headers: {'Content-Type': 'application/json'},
      data: subCategoryRequest
    },
      );
    }
  


    export type ApiSubCategoriesCreateMutationResult = NonNullable<Awaited<ReturnType<typeof apiSubCategoriesCreate>>>
    export type ApiSubCategoriesCreateMutationBody = SubCategoryRequest
    export type ApiSubCategoriesCreateMutationError = unknown

    export const useApiSubCategoriesCreate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiSubCategoriesCreate>>, TError,{data: SubCategoryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiSubCategoriesCreate>>, {data: SubCategoryRequest}> = (props) => {
          const {data} = props ?? {};

          return  apiSubCategoriesCreate(data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiSubCategoriesCreate>>, TError, {data: SubCategoryRequest}, TContext>(mutationFn, mutationOptions)
    }
    /**
 * Return the given Subcategory.
 */
export const apiSubCategoriesRetrieve = (
    slug: string,
 signal?: AbortSignal
) => {
      return customInstance<SubCategory>(
      {url: `/api/sub-categories/${slug}/`, method: 'get', signal
    },
      );
    }
  

export const getApiSubCategoriesRetrieveQueryKey = (slug: string,) => [`/api/sub-categories/${slug}/`];

    
export type ApiSubCategoriesRetrieveInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>>
export type ApiSubCategoriesRetrieveInfiniteQueryError = unknown

export const useApiSubCategoriesRetrieveInfinite = <TData = Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>, TError = unknown>(
 slug: string, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiSubCategoriesRetrieveQueryKey(slug);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>> = ({ signal }) => apiSubCategoriesRetrieve(slug, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(slug),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiSubCategoriesRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>>
export type ApiSubCategoriesRetrieveQueryError = unknown

export const useApiSubCategoriesRetrieve = <TData = Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>, TError = unknown>(
 slug: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiSubCategoriesRetrieveQueryKey(slug);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>> = ({ signal }) => apiSubCategoriesRetrieve(slug, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(slug),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiSubCategoriesPartialUpdate = (
    slug: string,
    patchedSubCategoryRequest: PatchedSubCategoryRequest,
 
) => {
      return customInstance<SubCategory>(
      {url: `/api/sub-categories/${slug}/`, method: 'patch',
      headers: {'Content-Type': 'application/json'},
      data: patchedSubCategoryRequest
    },
      );
    }
  


    export type ApiSubCategoriesPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiSubCategoriesPartialUpdate>>>
    export type ApiSubCategoriesPartialUpdateMutationBody = PatchedSubCategoryRequest
    export type ApiSubCategoriesPartialUpdateMutationError = unknown

    export const useApiSubCategoriesPartialUpdate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiSubCategoriesPartialUpdate>>, TError,{slug: string;data: PatchedSubCategoryRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiSubCategoriesPartialUpdate>>, {slug: string;data: PatchedSubCategoryRequest}> = (props) => {
          const {slug,data} = props ?? {};

          return  apiSubCategoriesPartialUpdate(slug,data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiSubCategoriesPartialUpdate>>, TError, {slug: string;data: PatchedSubCategoryRequest}, TContext>(mutationFn, mutationOptions)
    }
    export const apiSubCategoriesDestroy = (
    slug: string,
 
) => {
      return customInstance<void>(
      {url: `/api/sub-categories/${slug}/`, method: 'delete'
    },
      );
    }
  


    export type ApiSubCategoriesDestroyMutationResult = NonNullable<Awaited<ReturnType<typeof apiSubCategoriesDestroy>>>
    
    export type ApiSubCategoriesDestroyMutationError = unknown

    export const useApiSubCategoriesDestroy = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiSubCategoriesDestroy>>, TError,{slug: string}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiSubCategoriesDestroy>>, {slug: string}> = (props) => {
          const {slug} = props ?? {};

          return  apiSubCategoriesDestroy(slug,)
        }

      return useMutation<Awaited<ReturnType<typeof apiSubCategoriesDestroy>>, TError, {slug: string}, TContext>(mutationFn, mutationOptions)
    }
    export const apiUsersList = (
    params?: ApiUsersListParams,
 signal?: AbortSignal
) => {
      return customInstance<PaginatedUserList>(
      {url: `/api/users/`, method: 'get', signal,
        params,
    },
      );
    }
  

export const getApiUsersListQueryKey = (params?: ApiUsersListParams,) => [`/api/users/`, ...(params ? [params]: [])];

    
export type ApiUsersListInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiUsersList>>>
export type ApiUsersListInfiniteQueryError = unknown

export const useApiUsersListInfinite = <TData = Awaited<ReturnType<typeof apiUsersList>>, TError = unknown>(
 params?: ApiUsersListParams, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiUsersList>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiUsersListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiUsersList>>> = ({ signal }) => apiUsersList(params, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiUsersList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiUsersListQueryResult = NonNullable<Awaited<ReturnType<typeof apiUsersList>>>
export type ApiUsersListQueryError = unknown

export const useApiUsersList = <TData = Awaited<ReturnType<typeof apiUsersList>>, TError = unknown>(
 params?: ApiUsersListParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiUsersList>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiUsersListQueryKey(params);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiUsersList>>> = ({ signal }) => apiUsersList(params, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiUsersList>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiUsersRetrieve = (
    username: string,
 signal?: AbortSignal
) => {
      return customInstance<User>(
      {url: `/api/users/${username}/`, method: 'get', signal
    },
      );
    }
  

export const getApiUsersRetrieveQueryKey = (username: string,) => [`/api/users/${username}/`];

    
export type ApiUsersRetrieveInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiUsersRetrieve>>>
export type ApiUsersRetrieveInfiniteQueryError = unknown

export const useApiUsersRetrieveInfinite = <TData = Awaited<ReturnType<typeof apiUsersRetrieve>>, TError = unknown>(
 username: string, options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiUsersRetrieve>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiUsersRetrieveQueryKey(username);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiUsersRetrieve>>> = ({ signal }) => apiUsersRetrieve(username, signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiUsersRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(username),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiUsersRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiUsersRetrieve>>>
export type ApiUsersRetrieveQueryError = unknown

export const useApiUsersRetrieve = <TData = Awaited<ReturnType<typeof apiUsersRetrieve>>, TError = unknown>(
 username: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiUsersRetrieve>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiUsersRetrieveQueryKey(username);

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiUsersRetrieve>>> = ({ signal }) => apiUsersRetrieve(username, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiUsersRetrieve>>, TError, TData>(queryKey, queryFn, {enabled: !!(username),  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export const apiUsersUpdate = (
    username: string,
    userRequest: UserRequest,
 
) => {
      return customInstance<User>(
      {url: `/api/users/${username}/`, method: 'put',
      headers: {'Content-Type': 'application/json'},
      data: userRequest
    },
      );
    }
  


    export type ApiUsersUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiUsersUpdate>>>
    export type ApiUsersUpdateMutationBody = UserRequest
    export type ApiUsersUpdateMutationError = unknown

    export const useApiUsersUpdate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiUsersUpdate>>, TError,{username: string;data: UserRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiUsersUpdate>>, {username: string;data: UserRequest}> = (props) => {
          const {username,data} = props ?? {};

          return  apiUsersUpdate(username,data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiUsersUpdate>>, TError, {username: string;data: UserRequest}, TContext>(mutationFn, mutationOptions)
    }
    export const apiUsersPartialUpdate = (
    username: string,
    patchedUserRequest: PatchedUserRequest,
 
) => {
      return customInstance<User>(
      {url: `/api/users/${username}/`, method: 'patch',
      headers: {'Content-Type': 'application/json'},
      data: patchedUserRequest
    },
      );
    }
  


    export type ApiUsersPartialUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiUsersPartialUpdate>>>
    export type ApiUsersPartialUpdateMutationBody = PatchedUserRequest
    export type ApiUsersPartialUpdateMutationError = unknown

    export const useApiUsersPartialUpdate = <TError = unknown,
    
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof apiUsersPartialUpdate>>, TError,{username: string;data: PatchedUserRequest}, TContext>, }
) => {
      const {mutation: mutationOptions} = options ?? {}

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof apiUsersPartialUpdate>>, {username: string;data: PatchedUserRequest}> = (props) => {
          const {username,data} = props ?? {};

          return  apiUsersPartialUpdate(username,data,)
        }

      return useMutation<Awaited<ReturnType<typeof apiUsersPartialUpdate>>, TError, {username: string;data: PatchedUserRequest}, TContext>(mutationFn, mutationOptions)
    }
    export const apiUsersMeRetrieve = (
    
 signal?: AbortSignal
) => {
      return customInstance<User>(
      {url: `/api/users/me/`, method: 'get', signal
    },
      );
    }
  

export const getApiUsersMeRetrieveQueryKey = () => [`/api/users/me/`];

    
export type ApiUsersMeRetrieveInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof apiUsersMeRetrieve>>>
export type ApiUsersMeRetrieveInfiniteQueryError = unknown

export const useApiUsersMeRetrieveInfinite = <TData = Awaited<ReturnType<typeof apiUsersMeRetrieve>>, TError = unknown>(
  options?: { query?:UseInfiniteQueryOptions<Awaited<ReturnType<typeof apiUsersMeRetrieve>>, TError, TData>, }

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiUsersMeRetrieveQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiUsersMeRetrieve>>> = ({ signal }) => apiUsersMeRetrieve(signal);

  const query = useInfiniteQuery<Awaited<ReturnType<typeof apiUsersMeRetrieve>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

export type ApiUsersMeRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiUsersMeRetrieve>>>
export type ApiUsersMeRetrieveQueryError = unknown

export const useApiUsersMeRetrieve = <TData = Awaited<ReturnType<typeof apiUsersMeRetrieve>>, TError = unknown>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof apiUsersMeRetrieve>>, TError, TData>, }

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const {query: queryOptions} = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getApiUsersMeRetrieveQueryKey();

  

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiUsersMeRetrieve>>> = ({ signal }) => apiUsersMeRetrieve(signal);

  const query = useQuery<Awaited<ReturnType<typeof apiUsersMeRetrieve>>, TError, TData>(queryKey, queryFn, {  staleTime: Infinity,  ...queryOptions})

  return {
    queryKey,
    ...query
  }
}

