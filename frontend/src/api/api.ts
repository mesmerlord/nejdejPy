/**
 * Generated by orval v6.8.1 üç∫
 * Do not edit manually.
 * Nejdej API
 * Documentation of API endpoints of Nejdej
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery,
  useMutation,
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from 'react-query';
import type {
  Category,
  CategoryRequest,
  PatchedCategoryRequest,
  ListingView,
  ListingViewRequest,
  PatchedListingViewRequest,
  Listing,
  ListingRequest,
  PatchedListingRequest,
  Review,
  ReviewRequest,
  PatchedReviewRequest,
  SubCategory,
  SubCategoryRequest,
  PatchedSubCategoryRequest,
  User,
  UserRequest,
  PatchedUserRequest,
} from '.././model';
import { customInstance } from '.././api/custom-instance';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Return a list of all the existing categories.
 */
export const apiCategoriesList = (signal?: AbortSignal) => {
  return customInstance<Category[]>({ url: `/api/categories/`, method: 'get', signal });
};

export const getApiCategoriesListQueryKey = () => [`/api/categories/`];

export type ApiCategoriesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiCategoriesList>>
>;
export type ApiCategoriesListQueryError = unknown;

export const useApiCategoriesList = <
  TData = Awaited<ReturnType<typeof apiCategoriesList>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof apiCategoriesList>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiCategoriesListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiCategoriesList>>> = ({ signal }) =>
    apiCategoriesList(signal);

  const query = useQuery<Awaited<ReturnType<typeof apiCategoriesList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const apiCategoriesCreate = (categoryRequest: CategoryRequest) => {
  return customInstance<Category>({
    url: `/api/categories/`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: categoryRequest,
  });
};

export type ApiCategoriesCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiCategoriesCreate>>
>;
export type ApiCategoriesCreateMutationBody = CategoryRequest;
export type ApiCategoriesCreateMutationError = unknown;

export const useApiCategoriesCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiCategoriesCreate>>,
    TError,
    { data: CategoryRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiCategoriesCreate>>,
    { data: CategoryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return apiCategoriesCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiCategoriesCreate>>,
    TError,
    { data: CategoryRequest },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Return the given category.
 */
export const apiCategoriesRetrieve = (slug: string, signal?: AbortSignal) => {
  return customInstance<Category>({ url: `/api/categories/${slug}/`, method: 'get', signal });
};

export const getApiCategoriesRetrieveQueryKey = (slug: string) => [`/api/categories/${slug}/`];

export type ApiCategoriesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiCategoriesRetrieve>>
>;
export type ApiCategoriesRetrieveQueryError = unknown;

export const useApiCategoriesRetrieve = <
  TData = Awaited<ReturnType<typeof apiCategoriesRetrieve>>,
  TError = unknown
>(
  slug: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof apiCategoriesRetrieve>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiCategoriesRetrieveQueryKey(slug);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiCategoriesRetrieve>>> = ({ signal }) =>
    apiCategoriesRetrieve(slug, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiCategoriesRetrieve>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!slug, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const apiCategoriesPartialUpdate = (
  slug: string,
  patchedCategoryRequest: PatchedCategoryRequest
) => {
  return customInstance<Category>({
    url: `/api/categories/${slug}/`,
    method: 'patch',
    headers: { 'Content-Type': 'application/json' },
    data: patchedCategoryRequest,
  });
};

export type ApiCategoriesPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiCategoriesPartialUpdate>>
>;
export type ApiCategoriesPartialUpdateMutationBody = PatchedCategoryRequest;
export type ApiCategoriesPartialUpdateMutationError = unknown;

export const useApiCategoriesPartialUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiCategoriesPartialUpdate>>,
    TError,
    { slug: string; data: PatchedCategoryRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiCategoriesPartialUpdate>>,
    { slug: string; data: PatchedCategoryRequest }
  > = (props) => {
    const { slug, data } = props ?? {};

    return apiCategoriesPartialUpdate(slug, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiCategoriesPartialUpdate>>,
    TError,
    { slug: string; data: PatchedCategoryRequest },
    TContext
  >(mutationFn, mutationOptions);
};
export const apiCategoriesDestroy = (slug: string) => {
  return customInstance<void>({ url: `/api/categories/${slug}/`, method: 'delete' });
};

export type ApiCategoriesDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiCategoriesDestroy>>
>;

export type ApiCategoriesDestroyMutationError = unknown;

export const useApiCategoriesDestroy = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiCategoriesDestroy>>,
    TError,
    { slug: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiCategoriesDestroy>>,
    { slug: string }
  > = (props) => {
    const { slug } = props ?? {};

    return apiCategoriesDestroy(slug);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiCategoriesDestroy>>,
    TError,
    { slug: string },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Seed the database with categories from Bazos.
 */
export const apiCategoriesSeedInitalRetrieve = (signal?: AbortSignal) => {
  return customInstance<Category>({ url: `/api/categories/seed_inital/`, method: 'get', signal });
};

export const getApiCategoriesSeedInitalRetrieveQueryKey = () => [`/api/categories/seed_inital/`];

export type ApiCategoriesSeedInitalRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>
>;
export type ApiCategoriesSeedInitalRetrieveQueryError = unknown;

export const useApiCategoriesSeedInitalRetrieve = <
  TData = Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiCategoriesSeedInitalRetrieveQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>> = ({
    signal,
  }) => apiCategoriesSeedInitalRetrieve(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof apiCategoriesSeedInitalRetrieve>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions);

  return {
    queryKey,
    ...query,
  };
};

/**
 * Return a list of all the listing views.
 */
export const apiListingViewsList = (signal?: AbortSignal) => {
  return customInstance<ListingView[]>({ url: `/api/listing-views/`, method: 'get', signal });
};

export const getApiListingViewsListQueryKey = () => [`/api/listing-views/`];

export type ApiListingViewsListQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiListingViewsList>>
>;
export type ApiListingViewsListQueryError = unknown;

export const useApiListingViewsList = <
  TData = Awaited<ReturnType<typeof apiListingViewsList>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof apiListingViewsList>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiListingViewsListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingViewsList>>> = ({ signal }) =>
    apiListingViewsList(signal);

  const query = useQuery<Awaited<ReturnType<typeof apiListingViewsList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const apiListingViewsCreate = (listingViewRequest: ListingViewRequest) => {
  return customInstance<ListingView>({
    url: `/api/listing-views/`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: listingViewRequest,
  });
};

export type ApiListingViewsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiListingViewsCreate>>
>;
export type ApiListingViewsCreateMutationBody = ListingViewRequest;
export type ApiListingViewsCreateMutationError = unknown;

export const useApiListingViewsCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiListingViewsCreate>>,
    TError,
    { data: ListingViewRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiListingViewsCreate>>,
    { data: ListingViewRequest }
  > = (props) => {
    const { data } = props ?? {};

    return apiListingViewsCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiListingViewsCreate>>,
    TError,
    { data: ListingViewRequest },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Return the given listing view.
 */
export const apiListingViewsRetrieve = (id: number, signal?: AbortSignal) => {
  return customInstance<ListingView>({ url: `/api/listing-views/${id}/`, method: 'get', signal });
};

export const getApiListingViewsRetrieveQueryKey = (id: number) => [`/api/listing-views/${id}/`];

export type ApiListingViewsRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiListingViewsRetrieve>>
>;
export type ApiListingViewsRetrieveQueryError = unknown;

export const useApiListingViewsRetrieve = <
  TData = Awaited<ReturnType<typeof apiListingViewsRetrieve>>,
  TError = unknown
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof apiListingViewsRetrieve>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiListingViewsRetrieveQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingViewsRetrieve>>> = ({
    signal,
  }) => apiListingViewsRetrieve(id, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiListingViewsRetrieve>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const apiListingViewsPartialUpdate = (
  id: number,
  patchedListingViewRequest: PatchedListingViewRequest
) => {
  return customInstance<ListingView>({
    url: `/api/listing-views/${id}/`,
    method: 'patch',
    headers: { 'Content-Type': 'application/json' },
    data: patchedListingViewRequest,
  });
};

export type ApiListingViewsPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiListingViewsPartialUpdate>>
>;
export type ApiListingViewsPartialUpdateMutationBody = PatchedListingViewRequest;
export type ApiListingViewsPartialUpdateMutationError = unknown;

export const useApiListingViewsPartialUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiListingViewsPartialUpdate>>,
    TError,
    { id: number; data: PatchedListingViewRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiListingViewsPartialUpdate>>,
    { id: number; data: PatchedListingViewRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return apiListingViewsPartialUpdate(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiListingViewsPartialUpdate>>,
    TError,
    { id: number; data: PatchedListingViewRequest },
    TContext
  >(mutationFn, mutationOptions);
};
export const apiListingViewsDestroy = (id: number) => {
  return customInstance<void>({ url: `/api/listing-views/${id}/`, method: 'delete' });
};

export type ApiListingViewsDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiListingViewsDestroy>>
>;

export type ApiListingViewsDestroyMutationError = unknown;

export const useApiListingViewsDestroy = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiListingViewsDestroy>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiListingViewsDestroy>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return apiListingViewsDestroy(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiListingViewsDestroy>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Return a list of all the existing listings.
 */
export const apiListingsList = (signal?: AbortSignal) => {
  return customInstance<Listing[]>({ url: `/api/listings/`, method: 'get', signal });
};

export const getApiListingsListQueryKey = () => [`/api/listings/`];

export type ApiListingsListQueryResult = NonNullable<Awaited<ReturnType<typeof apiListingsList>>>;
export type ApiListingsListQueryError = unknown;

export const useApiListingsList = <
  TData = Awaited<ReturnType<typeof apiListingsList>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof apiListingsList>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiListingsListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingsList>>> = ({ signal }) =>
    apiListingsList(signal);

  const query = useQuery<Awaited<ReturnType<typeof apiListingsList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const apiListingsCreate = (listingRequest: ListingRequest) => {
  return customInstance<Listing>({
    url: `/api/listings/`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: listingRequest,
  });
};

export type ApiListingsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiListingsCreate>>
>;
export type ApiListingsCreateMutationBody = ListingRequest;
export type ApiListingsCreateMutationError = unknown;

export const useApiListingsCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiListingsCreate>>,
    TError,
    { data: ListingRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiListingsCreate>>,
    { data: ListingRequest }
  > = (props) => {
    const { data } = props ?? {};

    return apiListingsCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiListingsCreate>>,
    TError,
    { data: ListingRequest },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Return the given listing.
 */
export const apiListingsRetrieve = (id: string, signal?: AbortSignal) => {
  return customInstance<Listing>({ url: `/api/listings/${id}/`, method: 'get', signal });
};

export const getApiListingsRetrieveQueryKey = (id: string) => [`/api/listings/${id}/`];

export type ApiListingsRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiListingsRetrieve>>
>;
export type ApiListingsRetrieveQueryError = unknown;

export const useApiListingsRetrieve = <
  TData = Awaited<ReturnType<typeof apiListingsRetrieve>>,
  TError = unknown
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof apiListingsRetrieve>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiListingsRetrieveQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiListingsRetrieve>>> = ({ signal }) =>
    apiListingsRetrieve(id, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiListingsRetrieve>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const apiListingsPartialUpdate = (
  id: string,
  patchedListingRequest: PatchedListingRequest
) => {
  return customInstance<Listing>({
    url: `/api/listings/${id}/`,
    method: 'patch',
    headers: { 'Content-Type': 'application/json' },
    data: patchedListingRequest,
  });
};

export type ApiListingsPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiListingsPartialUpdate>>
>;
export type ApiListingsPartialUpdateMutationBody = PatchedListingRequest;
export type ApiListingsPartialUpdateMutationError = unknown;

export const useApiListingsPartialUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiListingsPartialUpdate>>,
    TError,
    { id: string; data: PatchedListingRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiListingsPartialUpdate>>,
    { id: string; data: PatchedListingRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return apiListingsPartialUpdate(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiListingsPartialUpdate>>,
    TError,
    { id: string; data: PatchedListingRequest },
    TContext
  >(mutationFn, mutationOptions);
};
export const apiListingsDestroy = (id: string) => {
  return customInstance<void>({ url: `/api/listings/${id}/`, method: 'delete' });
};

export type ApiListingsDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiListingsDestroy>>
>;

export type ApiListingsDestroyMutationError = unknown;

export const useApiListingsDestroy = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiListingsDestroy>>,
    TError,
    { id: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiListingsDestroy>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return apiListingsDestroy(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiListingsDestroy>>,
    TError,
    { id: string },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Return a list of all the existing reviews.
 */
export const apiReviewsList = (signal?: AbortSignal) => {
  return customInstance<Review[]>({ url: `/api/reviews/`, method: 'get', signal });
};

export const getApiReviewsListQueryKey = () => [`/api/reviews/`];

export type ApiReviewsListQueryResult = NonNullable<Awaited<ReturnType<typeof apiReviewsList>>>;
export type ApiReviewsListQueryError = unknown;

export const useApiReviewsList = <
  TData = Awaited<ReturnType<typeof apiReviewsList>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof apiReviewsList>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiReviewsListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiReviewsList>>> = ({ signal }) =>
    apiReviewsList(signal);

  const query = useQuery<Awaited<ReturnType<typeof apiReviewsList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const apiReviewsCreate = (reviewRequest: ReviewRequest) => {
  return customInstance<Review>({
    url: `/api/reviews/`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: reviewRequest,
  });
};

export type ApiReviewsCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiReviewsCreate>>
>;
export type ApiReviewsCreateMutationBody = ReviewRequest;
export type ApiReviewsCreateMutationError = unknown;

export const useApiReviewsCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiReviewsCreate>>,
    TError,
    { data: ReviewRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiReviewsCreate>>,
    { data: ReviewRequest }
  > = (props) => {
    const { data } = props ?? {};

    return apiReviewsCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiReviewsCreate>>,
    TError,
    { data: ReviewRequest },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Return the given review.
 */
export const apiReviewsRetrieve = (id: number, signal?: AbortSignal) => {
  return customInstance<Review>({ url: `/api/reviews/${id}/`, method: 'get', signal });
};

export const getApiReviewsRetrieveQueryKey = (id: number) => [`/api/reviews/${id}/`];

export type ApiReviewsRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiReviewsRetrieve>>
>;
export type ApiReviewsRetrieveQueryError = unknown;

export const useApiReviewsRetrieve = <
  TData = Awaited<ReturnType<typeof apiReviewsRetrieve>>,
  TError = unknown
>(
  id: number,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof apiReviewsRetrieve>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiReviewsRetrieveQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiReviewsRetrieve>>> = ({ signal }) =>
    apiReviewsRetrieve(id, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiReviewsRetrieve>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!id, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const apiReviewsPartialUpdate = (id: number, patchedReviewRequest: PatchedReviewRequest) => {
  return customInstance<Review>({
    url: `/api/reviews/${id}/`,
    method: 'patch',
    headers: { 'Content-Type': 'application/json' },
    data: patchedReviewRequest,
  });
};

export type ApiReviewsPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiReviewsPartialUpdate>>
>;
export type ApiReviewsPartialUpdateMutationBody = PatchedReviewRequest;
export type ApiReviewsPartialUpdateMutationError = unknown;

export const useApiReviewsPartialUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiReviewsPartialUpdate>>,
    TError,
    { id: number; data: PatchedReviewRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiReviewsPartialUpdate>>,
    { id: number; data: PatchedReviewRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return apiReviewsPartialUpdate(id, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiReviewsPartialUpdate>>,
    TError,
    { id: number; data: PatchedReviewRequest },
    TContext
  >(mutationFn, mutationOptions);
};
export const apiReviewsDestroy = (id: number) => {
  return customInstance<void>({ url: `/api/reviews/${id}/`, method: 'delete' });
};

export type ApiReviewsDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiReviewsDestroy>>
>;

export type ApiReviewsDestroyMutationError = unknown;

export const useApiReviewsDestroy = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiReviewsDestroy>>,
    TError,
    { id: number },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiReviewsDestroy>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return apiReviewsDestroy(id);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiReviewsDestroy>>,
    TError,
    { id: number },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Return a list of all the existing Subcategories.
 */
export const apiSubCategoriesList = (signal?: AbortSignal) => {
  return customInstance<SubCategory[]>({ url: `/api/sub-categories/`, method: 'get', signal });
};

export const getApiSubCategoriesListQueryKey = () => [`/api/sub-categories/`];

export type ApiSubCategoriesListQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiSubCategoriesList>>
>;
export type ApiSubCategoriesListQueryError = unknown;

export const useApiSubCategoriesList = <
  TData = Awaited<ReturnType<typeof apiSubCategoriesList>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof apiSubCategoriesList>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiSubCategoriesListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiSubCategoriesList>>> = ({ signal }) =>
    apiSubCategoriesList(signal);

  const query = useQuery<Awaited<ReturnType<typeof apiSubCategoriesList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const apiSubCategoriesCreate = (subCategoryRequest: SubCategoryRequest) => {
  return customInstance<SubCategory>({
    url: `/api/sub-categories/`,
    method: 'post',
    headers: { 'Content-Type': 'application/json' },
    data: subCategoryRequest,
  });
};

export type ApiSubCategoriesCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiSubCategoriesCreate>>
>;
export type ApiSubCategoriesCreateMutationBody = SubCategoryRequest;
export type ApiSubCategoriesCreateMutationError = unknown;

export const useApiSubCategoriesCreate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiSubCategoriesCreate>>,
    TError,
    { data: SubCategoryRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiSubCategoriesCreate>>,
    { data: SubCategoryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return apiSubCategoriesCreate(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiSubCategoriesCreate>>,
    TError,
    { data: SubCategoryRequest },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * Return the given Subcategory.
 */
export const apiSubCategoriesRetrieve = (slug: string, signal?: AbortSignal) => {
  return customInstance<SubCategory>({
    url: `/api/sub-categories/${slug}/`,
    method: 'get',
    signal,
  });
};

export const getApiSubCategoriesRetrieveQueryKey = (slug: string) => [
  `/api/sub-categories/${slug}/`,
];

export type ApiSubCategoriesRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>
>;
export type ApiSubCategoriesRetrieveQueryError = unknown;

export const useApiSubCategoriesRetrieve = <
  TData = Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>,
  TError = unknown
>(
  slug: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>, TError, TData>;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiSubCategoriesRetrieveQueryKey(slug);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>> = ({
    signal,
  }) => apiSubCategoriesRetrieve(slug, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiSubCategoriesRetrieve>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!slug, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const apiSubCategoriesPartialUpdate = (
  slug: string,
  patchedSubCategoryRequest: PatchedSubCategoryRequest
) => {
  return customInstance<SubCategory>({
    url: `/api/sub-categories/${slug}/`,
    method: 'patch',
    headers: { 'Content-Type': 'application/json' },
    data: patchedSubCategoryRequest,
  });
};

export type ApiSubCategoriesPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiSubCategoriesPartialUpdate>>
>;
export type ApiSubCategoriesPartialUpdateMutationBody = PatchedSubCategoryRequest;
export type ApiSubCategoriesPartialUpdateMutationError = unknown;

export const useApiSubCategoriesPartialUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiSubCategoriesPartialUpdate>>,
    TError,
    { slug: string; data: PatchedSubCategoryRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiSubCategoriesPartialUpdate>>,
    { slug: string; data: PatchedSubCategoryRequest }
  > = (props) => {
    const { slug, data } = props ?? {};

    return apiSubCategoriesPartialUpdate(slug, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiSubCategoriesPartialUpdate>>,
    TError,
    { slug: string; data: PatchedSubCategoryRequest },
    TContext
  >(mutationFn, mutationOptions);
};
export const apiSubCategoriesDestroy = (slug: string) => {
  return customInstance<void>({ url: `/api/sub-categories/${slug}/`, method: 'delete' });
};

export type ApiSubCategoriesDestroyMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiSubCategoriesDestroy>>
>;

export type ApiSubCategoriesDestroyMutationError = unknown;

export const useApiSubCategoriesDestroy = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiSubCategoriesDestroy>>,
    TError,
    { slug: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiSubCategoriesDestroy>>,
    { slug: string }
  > = (props) => {
    const { slug } = props ?? {};

    return apiSubCategoriesDestroy(slug);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiSubCategoriesDestroy>>,
    TError,
    { slug: string },
    TContext
  >(mutationFn, mutationOptions);
};
export const apiUsersList = (signal?: AbortSignal) => {
  return customInstance<User[]>({ url: `/api/users/`, method: 'get', signal });
};

export const getApiUsersListQueryKey = () => [`/api/users/`];

export type ApiUsersListQueryResult = NonNullable<Awaited<ReturnType<typeof apiUsersList>>>;
export type ApiUsersListQueryError = unknown;

export const useApiUsersList = <
  TData = Awaited<ReturnType<typeof apiUsersList>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof apiUsersList>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiUsersListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiUsersList>>> = ({ signal }) =>
    apiUsersList(signal);

  const query = useQuery<Awaited<ReturnType<typeof apiUsersList>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};

export const apiUsersRetrieve = (username: string, signal?: AbortSignal) => {
  return customInstance<User>({ url: `/api/users/${username}/`, method: 'get', signal });
};

export const getApiUsersRetrieveQueryKey = (username: string) => [`/api/users/${username}/`];

export type ApiUsersRetrieveQueryResult = NonNullable<Awaited<ReturnType<typeof apiUsersRetrieve>>>;
export type ApiUsersRetrieveQueryError = unknown;

export const useApiUsersRetrieve = <
  TData = Awaited<ReturnType<typeof apiUsersRetrieve>>,
  TError = unknown
>(
  username: string,
  options?: { query?: UseQueryOptions<Awaited<ReturnType<typeof apiUsersRetrieve>>, TError, TData> }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiUsersRetrieveQueryKey(username);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiUsersRetrieve>>> = ({ signal }) =>
    apiUsersRetrieve(username, signal);

  const query = useQuery<Awaited<ReturnType<typeof apiUsersRetrieve>>, TError, TData>(
    queryKey,
    queryFn,
    { enabled: !!username, ...queryOptions }
  );

  return {
    queryKey,
    ...query,
  };
};

export const apiUsersUpdate = (username: string, userRequest: UserRequest) => {
  return customInstance<User>({
    url: `/api/users/${username}/`,
    method: 'put',
    headers: { 'Content-Type': 'application/json' },
    data: userRequest,
  });
};

export type ApiUsersUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof apiUsersUpdate>>>;
export type ApiUsersUpdateMutationBody = UserRequest;
export type ApiUsersUpdateMutationError = unknown;

export const useApiUsersUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiUsersUpdate>>,
    TError,
    { username: string; data: UserRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiUsersUpdate>>,
    { username: string; data: UserRequest }
  > = (props) => {
    const { username, data } = props ?? {};

    return apiUsersUpdate(username, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiUsersUpdate>>,
    TError,
    { username: string; data: UserRequest },
    TContext
  >(mutationFn, mutationOptions);
};
export const apiUsersPartialUpdate = (username: string, patchedUserRequest: PatchedUserRequest) => {
  return customInstance<User>({
    url: `/api/users/${username}/`,
    method: 'patch',
    headers: { 'Content-Type': 'application/json' },
    data: patchedUserRequest,
  });
};

export type ApiUsersPartialUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersPartialUpdate>>
>;
export type ApiUsersPartialUpdateMutationBody = PatchedUserRequest;
export type ApiUsersPartialUpdateMutationError = unknown;

export const useApiUsersPartialUpdate = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof apiUsersPartialUpdate>>,
    TError,
    { username: string; data: PatchedUserRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof apiUsersPartialUpdate>>,
    { username: string; data: PatchedUserRequest }
  > = (props) => {
    const { username, data } = props ?? {};

    return apiUsersPartialUpdate(username, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof apiUsersPartialUpdate>>,
    TError,
    { username: string; data: PatchedUserRequest },
    TContext
  >(mutationFn, mutationOptions);
};
export const apiUsersMeRetrieve = (signal?: AbortSignal) => {
  return customInstance<User>({ url: `/api/users/me/`, method: 'get', signal });
};

export const getApiUsersMeRetrieveQueryKey = () => [`/api/users/me/`];

export type ApiUsersMeRetrieveQueryResult = NonNullable<
  Awaited<ReturnType<typeof apiUsersMeRetrieve>>
>;
export type ApiUsersMeRetrieveQueryError = unknown;

export const useApiUsersMeRetrieve = <
  TData = Awaited<ReturnType<typeof apiUsersMeRetrieve>>,
  TError = unknown
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof apiUsersMeRetrieve>>, TError, TData>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getApiUsersMeRetrieveQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apiUsersMeRetrieve>>> = ({ signal }) =>
    apiUsersMeRetrieve(signal);

  const query = useQuery<Awaited<ReturnType<typeof apiUsersMeRetrieve>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions
  );

  return {
    queryKey,
    ...query,
  };
};
