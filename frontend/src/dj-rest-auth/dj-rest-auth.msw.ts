/**
 * Generated by orval v6.8.1 🍺
 * Do not edit manually.
 * Nejdej API
 * Documentation of API endpoints of Nejdej
 * OpenAPI spec version: 1.0.0
 */
import {
  rest
} from 'msw'
import {
  faker
} from '@faker-js/faker'

export const getDjRestAuthLoginCreateMock = () => ({key: faker.random.word()})

export const getDjRestAuthLogoutCreateMock = () => ({detail: faker.random.word()})

export const getDjRestAuthPasswordChangeCreateMock = () => ({detail: faker.random.word()})

export const getDjRestAuthPasswordResetCreateMock = () => ({detail: faker.random.word()})

export const getDjRestAuthPasswordResetConfirmCreateMock = () => ({detail: faker.random.word()})

export const getDjRestAuthUserRetrieveMock = () => ({pk: faker.datatype.number(), username: faker.random.word(), email: faker.internet.email(), first_name: faker.random.arrayElement([faker.random.word(), undefined]), last_name: faker.random.arrayElement([faker.random.arrayElement([faker.random.word(), null]), undefined])})

export const getDjRestAuthUserUpdateMock = () => ({pk: faker.datatype.number(), username: faker.random.word(), email: faker.internet.email(), first_name: faker.random.arrayElement([faker.random.word(), undefined]), last_name: faker.random.arrayElement([faker.random.arrayElement([faker.random.word(), null]), undefined])})

export const getDjRestAuthUserPartialUpdateMock = () => ({pk: faker.datatype.number(), username: faker.random.word(), email: faker.internet.email(), first_name: faker.random.arrayElement([faker.random.word(), undefined]), last_name: faker.random.arrayElement([faker.random.arrayElement([faker.random.word(), null]), undefined])})

export const getDjRestAuthMSW = () => [
rest.post('*/dj-rest-auth/login', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDjRestAuthLoginCreateMock()),
        )
      }),rest.post('*/dj-rest-auth/logout', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDjRestAuthLogoutCreateMock()),
        )
      }),rest.post('*/dj-rest-auth/password/change', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDjRestAuthPasswordChangeCreateMock()),
        )
      }),rest.post('*/dj-rest-auth/password/reset', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDjRestAuthPasswordResetCreateMock()),
        )
      }),rest.post('*/dj-rest-auth/password/reset/confirm', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDjRestAuthPasswordResetConfirmCreateMock()),
        )
      }),rest.get('*/dj-rest-auth/user', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDjRestAuthUserRetrieveMock()),
        )
      }),rest.put('*/dj-rest-auth/user', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDjRestAuthUserUpdateMock()),
        )
      }),rest.patch('*/dj-rest-auth/user', (_req, res, ctx) => {
        return res(
          ctx.delay(1000),
          ctx.status(200, 'Mocked status'),
ctx.json(getDjRestAuthUserPartialUpdateMock()),
        )
      }),]
